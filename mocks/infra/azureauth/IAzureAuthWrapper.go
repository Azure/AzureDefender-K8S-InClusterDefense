// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	azureauth "github.com/Azure/AzureDefender-K8S-InClusterDefense/pkg/infra/azureauth"
	autorest "github.com/Azure/go-autorest/autorest"
	mock "github.com/stretchr/testify/mock"
)

// IAzureAuthWrapper is an autogenerated mock type for the IAzureAuthWrapper type
type IAzureAuthWrapper struct {
	mock.Mock
}

// GetSettingsFromEnvironment provides a mock function with given fields:
func (_m *IAzureAuthWrapper) GetSettingsFromEnvironment() (azureauth.IEnvironmentSettingsWrapper, error) {
	ret := _m.Called()

	var r0 azureauth.IEnvironmentSettingsWrapper
	if rf, ok := ret.Get(0).(func() azureauth.IEnvironmentSettingsWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(azureauth.IEnvironmentSettingsWrapper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthorizerFromCLIWithResource provides a mock function with given fields: _a0
func (_m *IAzureAuthWrapper) NewAuthorizerFromCLIWithResource(_a0 string) (*autorest.Authorizer, error) {
	ret := _m.Called(_a0)

	var r0 *autorest.Authorizer
	if rf, ok := ret.Get(0).(func(string) *autorest.Authorizer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
