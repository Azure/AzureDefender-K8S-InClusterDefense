// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	registry "github.com/Azure/AzureDefender-K8S-InClusterDefense/pkg/infra/registry"
	mock "github.com/stretchr/testify/mock"
)

// IRegistryClient is an autogenerated mock type for the IRegistryClient type
type IRegistryClient struct {
	mock.Mock
}

// GetDigestUsingACRAttachAuth provides a mock function with given fields: imageReference
func (_m *IRegistryClient) GetDigestUsingACRAttachAuth(imageReference registry.IImageReference) (string, error) {
	ret := _m.Called(imageReference)

	var r0 string
	if rf, ok := ret.Get(0).(func(registry.IImageReference) string); ok {
		r0 = rf(imageReference)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(registry.IImageReference) error); ok {
		r1 = rf(imageReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDigestUsingDefaultAuth provides a mock function with given fields: imageReference
func (_m *IRegistryClient) GetDigestUsingDefaultAuth(imageReference registry.IImageReference) (string, error) {
	ret := _m.Called(imageReference)

	var r0 string
	if rf, ok := ret.Get(0).(func(registry.IImageReference) string); ok {
		r0 = rf(imageReference)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(registry.IImageReference) error); ok {
		r1 = rf(imageReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDigestUsingK8SAuth provides a mock function with given fields: imageReference, namespace, imagePullSecrets, serviceAccountName
func (_m *IRegistryClient) GetDigestUsingK8SAuth(imageReference registry.IImageReference, namespace string, imagePullSecrets []string, serviceAccountName string) (string, error) {
	ret := _m.Called(imageReference, namespace, imagePullSecrets, serviceAccountName)

	var r0 string
	if rf, ok := ret.Get(0).(func(registry.IImageReference, string, []string, string) string); ok {
		r0 = rf(imageReference, namespace, imagePullSecrets, serviceAccountName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(registry.IImageReference, string, []string, string) error); ok {
		r1 = rf(imageReference, namespace, imagePullSecrets, serviceAccountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
