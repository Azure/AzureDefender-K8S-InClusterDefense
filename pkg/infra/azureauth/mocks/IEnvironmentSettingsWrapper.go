// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	autorest "github.com/Azure/go-autorest/autorest"
	azure "github.com/Azure/go-autorest/autorest/azure"

	mock "github.com/stretchr/testify/mock"
)

// IEnvironmentSettingsWrapper is an autogenerated mock type for the IEnvironmentSettingsWrapper type
type IEnvironmentSettingsWrapper struct {
	mock.Mock
}

// GetEnvironment provides a mock function with given fields:
func (_m *IEnvironmentSettingsWrapper) GetEnvironment() *azure.Environment {
	ret := _m.Called()

	var r0 *azure.Environment
	if rf, ok := ret.Get(0).(func() *azure.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Environment)
		}
	}

	return r0
}

// GetAuthorizer provides a mock function with given fields:
func (_m *IEnvironmentSettingsWrapper) GetAuthorizer() (autorest.Authorizer, error) {
	ret := _m.Called()

	var r0 autorest.Authorizer
	if rf, ok := ret.Get(0).(func() autorest.Authorizer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValues provides a mock function with given fields:
func (_m *IEnvironmentSettingsWrapper) GetValues() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}
