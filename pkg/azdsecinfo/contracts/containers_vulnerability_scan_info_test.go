package contracts

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
)

const (
	ImageName             = "tomer.azurecr.io/core:4.6"
	ImageDigest           = "sha256:4a1c4b21597c1b4415bdbecb28a3296c6b5e23ca4f9feeb599860a1dac6a0108"
	GeneratedTimestampStr = "2021-01-01T22:00:00+00:00"
	ContainerName         = "testContainer"
	ScanStatus            = "Unhealthy"
	testDataJsonFilePath  = "./testdata/containers_vulnerability_scan_info.json"
)

type TestSuite struct {
	suite.Suite
	info                       *ContainersVulnerabilityScanInfo
	expectedGeneratedTimestamp time.Time
}

func (suite *TestSuite) SetupSuite() {
	var err error
	suite.expectedGeneratedTimestamp, err = time.Parse(time.RFC3339, GeneratedTimestampStr)
	if err != nil {
		suite.Fail("received error %t", err)
	}
}

func (suite *TestSuite) SetupTest() {
	suite.info = &ContainersVulnerabilityScanInfo{
		GeneratedTimestamp: suite.expectedGeneratedTimestamp,
		Containers: []*ContainerScanSummary{
			{
				Name:        ContainerName,
				ImageDigest: ImageDigest,
				ImageName:   ImageName,
				ScanStatus:  ScanStatus,
				ScanFindings: []*ScanFinding{
					{
						Patchable: true,
						Id:        "123",
						Severity:  "High",
					},
				},
			},
		},
	}
}

func (suite *TestSuite) Test_AssertInfoMarshalString() {

	// Marshal the info object
	ser, err := json.Marshal(suite.info)
	if err != nil {
		suite.Fail("received error %t", err)
	}

	// Convert byte slice to a string
	actualMarshaledObjectStr := string(ser)

	// Read expected json
	jsonFile, err := os.Open(testDataJsonFilePath)
	if err != nil {
		suite.Fail("received error %t", err)
	}

	expectedByteValue, err := ioutil.ReadAll(jsonFile)
	if err != nil {
		suite.Fail("received error %t", err)
	}

	err = jsonFile.Close()
	if err != nil {
		suite.Fail("received error %t", err)
	}

	// Clean new lines and spaces in string
	expectedBuffer := new(bytes.Buffer)
	err = json.Compact(expectedBuffer, expectedByteValue)
	if err != nil {
		suite.Fail("received error %t", err)
	}
	expectedMarshaledObjectStr := expectedBuffer.String()

	// Compare
	suite.Equal(expectedMarshaledObjectStr, actualMarshaledObjectStr)
}

func Test_ContainerScanVulnerabilities(t *testing.T) {
	suite.Run(t, new(TestSuite))
}
