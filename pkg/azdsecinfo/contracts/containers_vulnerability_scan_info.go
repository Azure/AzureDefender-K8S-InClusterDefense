package contracts

import "time"

const (
	AzdSecInfoAnnotationPrefix                    = "azuredefender.io"
	ContainersVulnerabilityScanInfoAnnotationName = AzdSecInfoAnnotationPrefix + "/containers.vulnerability.scan.info"
)

// ContainerVulnerabilityScanInfoList a list of container vulnerability scan info
type ContainerVulnerabilityScanInfoList struct {
	//GeneratedTimestamp represents the time the scan info list (this) was generated
	GeneratedTimestamp time.Time                         `json:"generatedTimestamp"`
	Containers         []*ContainerVulnerabilityScanInfo `json:"containers"`
}

// ContainerVulnerabilityScanInfo represents containers vulnerability scan information
type ContainerVulnerabilityScanInfo struct {
	//  Name container name in resource spec
	Name string `json:"name"`

	// Image container's image
	Image *Image `json:"image"`

	//ScanStatus vulnerability scan status for image
	ScanStatus ScanStatus `json:"scanStatus"`

	// ScanFindings vulnerability scan findings for image
	ScanFindings []*ScanFinding `json:"scanFindings"`
}

// Image represents container image
type Image struct {
	// Registry host endpoint (e.g. registry.docker.io)
	Registry string `json:"registry"`

	// Repository image repository
	Repository string `json:"repository"`

	// Tag image tag (optional)
	Tag string `json:"tag"`

	// Digest image resolved digest
	// TODO: Add doc that this is currently resolved in admission time and could defer in node pull sue to local cacheing
	Digest string `json:"digest"`
}

// ScanStatus represents contatiner image scan status enum
type ScanStatus string

// ScanStatus Enum
const (
	Unscanned     ScanStatus = "unscanned"
	UnhealthyScan ScanStatus = "unhealthyScan"
	HealthyScan   ScanStatus = "healthyScan"
)

// ScanFinding represents a single findings of image vulnerability scan
type ScanFinding struct {
	// Patchable represents whether finding is patchable
	Patchable bool `json:"patchable"`

	// Id represents finding's Id
	Id string `json:"id"`

	// Severity represents finding's severity (e.g. "high")
	Severity string `json:"severity"`
}
