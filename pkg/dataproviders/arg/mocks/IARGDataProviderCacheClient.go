// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	contracts "github.com/Azure/AzureDefender-K8S-InClusterDefense/pkg/azdsecinfo/contracts"
	mock "github.com/stretchr/testify/mock"
)

// IARGDataProviderCacheClient is an autogenerated mock type for the IARGDataProviderCacheClient type
type IARGDataProviderCacheClient struct {
	mock.Mock
}

// GetResultsFromCache provides a mock function with given fields: digest
func (_m *IARGDataProviderCacheClient) GetResultsFromCache(digest string) (contracts.ScanStatus, []*contracts.ScanFinding, error) {
	ret := _m.Called(digest)

	var r0 contracts.ScanStatus
	if rf, ok := ret.Get(0).(func(string) contracts.ScanStatus); ok {
		r0 = rf(digest)
	} else {
		r0 = ret.Get(0).(contracts.ScanStatus)
	}

	var r1 []*contracts.ScanFinding
	if rf, ok := ret.Get(1).(func(string) []*contracts.ScanFinding); ok {
		r1 = rf(digest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*contracts.ScanFinding)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(digest)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetScanFindingsInCache provides a mock function with given fields: scanFindings, scanStatus, digest
func (_m *IARGDataProviderCacheClient) SetScanFindingsInCache(scanFindings []*contracts.ScanFinding, scanStatus contracts.ScanStatus, digest string) error {
	ret := _m.Called(scanFindings, scanStatus, digest)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*contracts.ScanFinding, contracts.ScanStatus, string) error); ok {
		r0 = rf(scanFindings, scanStatus, digest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
