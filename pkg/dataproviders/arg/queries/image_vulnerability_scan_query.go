package queries

// Template string for ContainerVulnerabilityScanResultsQuery
const _containerVulnerabilityScanResultsQueryTemplateStr = `
securityresources
 | where type == 'microsoft.security/assessments/subassessments'
 | where id matches regex  '(.+?)/providers/Microsoft.Security/assessments/dbd0cb49-b563-45e7-9724-889e799fa648/'
 | extend digest = tostring(properties.additionalData.imageDigest)
 | extend repository = tostring(properties.additionalData.repositoryName)
 | extend registry = tostring(properties.additionalData.registryHost)
 | where   registry =~ "{{.Registry}}" and repository =~ "{{.Repository}}" and digest == "{{.Digest}}"
 | parse id with  registryResourceId '/providers/Microsoft.Security/assessments/' *
 | extend scanFindingSeverity = tostring(properties.status.severity), scanStatus = tostring(properties.status.code)
 | extend id = tostring(properties.id), patchable = tostring(properties.additionalData.patchable)
 | project registry, repository, digest, scanStatus, scanFindingSeverity, id, patchable
`

// ContainerVulnerabilityScanResultsQueryParameters Parameters for _containerVulnerabilityScanResultsQueryTemplateStr query template
type ContainerVulnerabilityScanResultsQueryParameters struct {
	// Registry Image registry
	Registry   string
	// Repository image repository
	Repository string
	// Digest image digest
	Digest     string
}

// ContainerVulnerabilityScanResultsQueryResponseObject object returnes in each row query above
type ContainerVulnerabilityScanResultsQueryResponseObject struct {
	// Registry Image registry
	Registry string `json:"registry"`
	// Repository image repository
	Repository string `json:"repository"`
	// Digest image digest
	Digest string `json:"digest"`
	// Scan status for image
	ScanStatus string `json:"scanStatus"`
	// Finding Severity
	ScanFindingSeverity string `json:"scanFindingSeverity"`
	// Finding Id
	Id string `json:"id"`
	// Is finding patchable
	Patchable string `json:"patchable"`
}